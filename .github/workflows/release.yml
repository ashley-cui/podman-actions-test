name: Release [DO NOT USE - TESTING ONLY]
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version to build and upload (e.g. "v9.8.7")'
        required: true
      buildonly:
        description: 'Build only: Do not create release'
        required: true
        default: "true"  # 'choice' type requires string value
        type: choice
        options:
          - "true"  # Must be quoted string, boolean value not supported.
          - "false"

permissions:
  contents: write
  actions: write

jobs:
  check:
    name: Check
    runs-on: ubuntu-22.04
    steps:
    - name: Determine Version
      id: getversion
      run: |
        if [[ -z "${{ inputs.version }}" ]]
        then
              VERSION=${{ github.event.release.tag_name }}
        else
              VERSION=${{ inputs.version }}
        fi
        echo
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: Determine release
      id: buildonly
      run: |
        # The 'tag' trigger will not have a 'buildonly' input set. Handle
        # this case in a readable/maintainable way.
        if [[ -z "${{ inputs.buildonly }}" ]]
        then
          echo "buildonly=false" >> $GITHUB_OUTPUT
        else
          echo "buildonly=${{ inputs.buildonly }}" >> $GITHUB_OUTPUT
        fi
        echo "::notice::This workflow execution will not create a release. It will be build-only."
    outputs:
      version: ${{ steps.getversion.outputs.version }}
      buildonly: ${{ steps.buildonly.outputs.buildonly }}

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-22.04
    needs: check
    steps:
    - name: Checkout Version
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.check.outputs.version }}
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable
    - name: Set up pandoc
      run: |
          sudo apt-get install -y pandoc
    - name: Build Artifacts
      run: |
          make release-artifacts
    - name: Upload to Actions as artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: release/*

  mac-pkg:
    name: Build MacOS pkginstaller
    needs: check
    runs-on: macos-latest
    env:
      APPLICATION_CERTIFICATE: ${{ secrets.MACOS_APPLICATION_CERT }}
      CODESIGN_IDENTITY: ${{ secrets.MACOS_APPLICATION_IDENTITY }}
      INSTALLER_CERTIFICATE: ${{ secrets.MACOS_INSTALLER_CERT }}
      PRODUCTSIGN_IDENTITY: ${{ secrets.MACOS_INSTALLER_IDENTITY }}
      CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      NOTARIZE_TEAM: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
      NOTARIZE_USERNAME: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
      NOTARIZE_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PWD }}

      KEYCHAIN_PWD: ${{ secrets.MACOS_CI_KEYCHAIN_PWD }}
    steps:
    - name: Checkout Version
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.check.outputs.version }}
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable
# TODO: update without NO_CODESIGN and setup keychain
    - name: Build and Sign ARM
      working-directory: contrib/pkginstaller
      run: |
        make ARCH=aarch64 NO_CODESIGN=1 pkginstaller
    - name: Build and Sign AMD
      working-directory: contrib/pkginstaller
      run: |
        make ARCH=amd64 NO_CODESIGN=1 pkginstaller
    - name: Build and Sign Universal
      working-directory: contrib/pkginstaller
      run: |
        make ARCH=universal NO_CODESIGN=1 pkginstaller
    - name: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: mac-installers
        path: |
          contrib/pkginstaller/out/podman-installer-macos-*.pkg

  windows-installer:
    name: Build Windows Installer
    runs-on: windows-latest
    needs: [check, build-artifacts]
    env:
      FETCH_BASE_URL: ${{ github.server_url }}/${{ github.repository }}
    steps:
    - name: Determine version
      id: getversion
      run: |
        $version = "${{ needs.check.outputs.version }}"
        if ($version[0] -eq "v") {
              $version = $version.Substring(1)
          }
        Write-Output "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Checkout Podman
      uses: actions/checkout@v4
    - name: Download Windows zip artifact
      uses: actions/download-artifact@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable
    - name: Set up WiX
      run: dotnet tool install --global wix
    - name: Setup Signature Tooling
      run: |
        dotnet tool install --global AzureSignTool --version 3.0.0
        echo "CERT_NAME=${{secrets.AZ_CERT_NAME}}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "VAULT_ID=${{secrets.AZ_VAULT_ID}}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "APP_ID=${{secrets.AZ_APP_ID}}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "TENANT_ID=${{secrets.AZ_TENANT_ID}}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "CLIENT_SECRET=${{secrets.AZ_CLIENT_SECRET}}" | Out-File -FilePath $env:GITHUB_ENV -Append
    - name: Pandoc Setup
      uses: r-lib/actions/setup-pandoc@v2
      with:
        pandoc-version: '3.1.11'
    - name: Build
      id: build
      run: |
        Push-Location contrib\win-installer
        .\build.ps1 ${{steps.getversion.outputs.version}} prod ${{ github.workspace }}\release-artifacts
        $code = $LASTEXITCODE
        if ($code -eq 2) {
          Write-Output "artifact-missing=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Pop-Location
          Exit 0
        }
        Pop-Location
        Exit $code
    - name: Display structure of downloaded files
      run: |
        Push-Location contrib\win-installer
        Get-ChildItem
        Pop-Location
    - name: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: win-installer
        path: |
          .\contrib\win-installer\podman-${{steps.getversion.outputs.version}}-setup.exe
  release:
    name: Create Release
    runs-on: ubuntu-24.04
    if: ${{ needs.check.outputs.buildonly }} == 'false'
    needs: [check, build-artifacts, mac-pkg, windows-installer]
    env:
      VERSION: ${{ needs.check.outputs.version }}
    steps:
    - name: Get release notes
      run: |
        curl -fL "https://raw.githubusercontent.com/containers/podman/refs/tags/$VERSION/RELEASE_NOTES.md" -o RELEASE_NOTES.md
        ver="$(echo "$VERSION" | sed -e "s/^v//" -e "s/-rc.*//")"
        releasenotes="$VERSION-release-notes.md"
        awk -v ver=$ver '/^## / { if (p) { exit }; if ($2 == ver) { p=1; next } } p' RELEASE_NOTES.md > $releasenotes

        if [[ -z $(grep '[^[:space:]]' $releasenotes) ]]; then
          if [[ $VERSION != *-rc* ]]; then
              echo "::notice:: Release does not have release notes"
          else
          echo "This is a release candidate of Podman v$ver. Full release notes will be available with a later RC." > $releasenotes
          fi
        fi
    - name: Get release notes
      run: cat $VERSION-release-notes.md
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    - name: Show artifacts
      run: |
        mv win-installer/* release-artifacts
        mv mac-installers/* release-artifacts
        pushd release-artifacts
        sha256sum * > shasums
        popd
    - name: Display
      run: |
        echo "version: $VERSION"
        echo
        echo "release notes:"
        cat ${{needs.check.outputs.version}}-release-notes.md
        echo
        cat release-artifacts/shasums
        ls -la release-artifacts

        if [[ ${{needs.check.outputs.version}} == *-rc* ]]; then
          echo "Marking as pre-release, this is an RC"
        fi
    - name: Create release check
      if: ${{ needs.check.outputs.buildonly }} == 'false'
      run: echo "A release is needed......."
    - name: Create release
      if: false
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if[[ $VERSION == *-rc* ]]; then
          $RC="--prerelease"
        fi
        gh release create $VERSION \
          -t testing \
          --notes-file $VERSION-release-notes.md \
          --verify-tag \
          $RC \
          release-artifacts/*
  notification:
    name: Email notification
    runs-on: ubuntu-24.04
    needs: [check, release]
    if: ${{ needs.check.outputs.buildonly }} == 'false'
    steps:
      - name: Format release email
        id: format
        env:
          VERSION: ${{ needs.check.outputs.version }}
        run: |
          if grep -Eq '.+-rc' <<<"$VERSION"
          then
            RC_PREFIX="candidate "
          fi

          echo "mail_subj=Podman ${RC_PREFIX}${VERSION} Released" >> $GITHUB_OUTPUT

          cat <<EOF>email_body.txt
          Hi all,

          Podman ${RC_PREFIX}${VERSION} is now available.  You may view the full details at
          https://github.com/${{ github.repository }}/releases/tag/$VERSION

          Release ${RC_PREFIX}Notes:
          --------------
          EOF

          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh release view $VERSION \
            --repo ${{ github.repository }} --json=body --jq '.body' >> email_body.txt

      # If job fails, permit operator to observe contents in case helpful.
      - name: Provide release e-mail contents for examination
        run: cat email_body.txt
      - name: ggs
        if: ${{ needs.check.outputs.buildonly }} == 'false'
        run: "echo: norelease needed"

      # - name: Send release notification e-mail
      #   # Ref: https://github.com/dawidd6/action-send-mail
      #   uses: dawidd6/action-send-mail@v3.12.0
      #   with:
      #     server_address: ${{secrets.ACTION_MAIL_SERVER}}
      #     server_port: 465
      #     username: ${{secrets.ACTION_MAIL_USERNAME}}
      #     password: ${{secrets.ACTION_MAIL_PASSWORD}}
      #     subject: ${{ steps.format.outputs.mail_subj }}
      #     to: Podman List <podman@lists.podman.io>
      #     from: ${{secrets.ACTION_MAIL_SENDER}}
      #     body: file://./email_body.txt
